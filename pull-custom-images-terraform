Terraform:
 
  data "aws_security_group" "previous-sg" {
  id = "sg-013789ce3325cf296" #existing security group id
}
 
data "aws_ami" "ubuntu" {
  most_recent = true
 
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }
 
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
 
  owners = ["099720109477"] # Canonical
}
 
 
#code for elastic ip
resource "aws_eip" "sush-eip" {
  instance = aws_instance.sush-server.id
}
#inject my ssh-key
resource "aws_key_pair" "terra_key" {
  key_name   = "terra.key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDd3wgYr6wA9F4EWLNprIeUhMzkFNyXnvleC9iKmrEcoTB3oj8QPkEnEEzHHyDQe14oQ5Uvp1i1wrE1aHUCYpvIe3ezIs1FKNihE7csmoa2LoH99jAUZRjj37bKZ4ZcDj4xsJMR84+i0s55mhV2ov9A0pCyPFdemMe1LubjIoGrKejO5XMFyF1puleAGYbIy9TbCDg+FiL6aQzjlkGrcL@@@                                                                                                                               }
 }
resource "aws_instance" "sush-server" {
  ami                    = data.aws_ami.ubuntu.id
  availability_zone      = "us-east-1a"
  instance_type          = "t4.micro"
  key_name               = "terra.key"
  vpc_security_group_ids = [data.aws_security_group.previous-sg.id]
  /* First of generate ssh key and share public ssh key with AWS
   and you can execute code*/
 
  #root disk
  root_block_device {
    volume_size           = "25"
    volume_type           = "gp2"
    delete_on_termination = true
  }
 
#additional data disk
  ebs_block_device {
    device_name           = "/dev/xvdb"
    volume_size           = "10"
    volume_type           = "gp2"
    delete_on_termination = true
  }
 
  user_data = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>sample webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF
 
  tags = {
    Name     = "hello-India"
    Stage    = "testing"
    Location = "India"
  }
}
